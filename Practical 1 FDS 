{"cells":[{"cell_type":"code","execution_count":null,"id":"91e1b8df-58da-4981-87c3-295aa50c740d","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"91e1b8df-58da-4981-87c3-295aa50c740d","outputId":"2ab4f9e6-9052-4ad5-f737-09393e3e0073","executionInfo":{"status":"ok","timestamp":1758191438802,"user_tz":-330,"elapsed":208,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["   age  salary  increment\n","0   23   30141          8\n","1   19   19896          7\n","2   68   16752          8\n","3   40   21987          8\n","4   35   30310          5\n"]}],"source":["import numpy as np\n","import pandas as pd\n","\n","\n","np.random.seed(43)\n","n_rows = 104\n","\n","data = {\n","    'age': np.random.randint(19, 75, size=n_rows),\n","    'salary': np.random.randint(14000, 40000, size=n_rows),\n","    'increment': np.random.choice([5, 6, 7, 8], size=n_rows)\n","}\n","\n","df = pd.DataFrame(data)\n","print(df.head())"]},{"cell_type":"code","execution_count":null,"id":"39cf0666-11e0-4844-9436-b93fbc079381","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"39cf0666-11e0-4844-9436-b93fbc079381","outputId":"3647cfdc-9681-4fd7-d117-c97f623c6cae","executionInfo":{"status":"ok","timestamp":1758191479387,"user_tz":-330,"elapsed":52,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Synthetic Dataset with NaN values:\n","\n","    age   salary  increment  Age\n","0    23  30141.0          8  NaN\n","1    19  19896.0          7  NaN\n","2    68  16752.0          8  NaN\n","3    40  21987.0          8  NaN\n","4    35  30310.0          5  NaN\n","5    70  21753.0          8  NaN\n","6    36  25780.0          8  NaN\n","7    46  29022.0          7  NaN\n","8    21  26102.0          5  NaN\n","9    65  22556.0          5  NaN\n","10   49  16303.0          7  NaN\n","11   42  27399.0          7  NaN\n","12   19  34249.0          8  NaN\n","13   54  35204.0          5  NaN\n"]}],"source":["df.loc[np.random.choice(df.index, 5, replace=False), \"salary\"] = np.nan\n","df.loc[np.random.choice(df.index,8, replace=False), \"Age\"] = np.nan\n","print(\"Synthetic Dataset with NaN values:\\n\")\n","print(df.head(14))"]},{"cell_type":"code","execution_count":null,"id":"612621bf-676d-4de6-ad72-a47edbd02f8d","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"612621bf-676d-4de6-ad72-a47edbd02f8d","outputId":"f652cf4c-a919-4e0c-ef62-989e881e2010","executionInfo":{"status":"ok","timestamp":1758191536916,"user_tz":-330,"elapsed":82,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-3194075108.py:5: RuntimeWarning: invalid value encountered in scalar divide\n","  (df.loc[mask, \"salary\"] * df.loc[mask, \"Age\"]).sum()\n"]}],"source":["mean_salary = df[\"salary\"].mean(skipna=True)   # default skipna=True\n","median_salary = df[\"salary\"].median(skipna=True)\n","mask = df[\"salary\"].notna() & df[\"Age\"].notna()\n","age_weighted_mean = (\n","    (df.loc[mask, \"salary\"] * df.loc[mask, \"Age\"]).sum()\n","    / df.loc[mask, \"Age\"].sum()\n",")"]},{"cell_type":"code","execution_count":null,"id":"253dd25e-370f-4f40-9f9f-4702790e79a9","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"253dd25e-370f-4f40-9f9f-4702790e79a9","outputId":"42e1994f-f23a-4b08-be11-de96968cc1cc","executionInfo":{"status":"ok","timestamp":1758191562297,"user_tz":-330,"elapsed":12,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Results:\n","Mean salary = 26840.00\n","Median Income = 27053.00\n","Age-Weighted Mean salary = nan\n"]}],"source":["print(\"\\nResults:\")\n","print(f\"Mean salary = {mean_salary:.2f}\")\n","print(f\"Median Income = {median_salary:.2f}\")\n","print(f\"Age-Weighted Mean salary = {age_weighted_mean:.2f}\")"]},{"cell_type":"markdown","id":"NWP4n026XLXT","metadata":{"id":"NWP4n026XLXT"},"source":[":Q Explain when weighted mean is preferable.\n","Ans:Use weighted mean when some data should matter more than others.\n"]},{"cell_type":"markdown","id":"BX9J_RBtXRx5","metadata":{"id":"BX9J_RBtXRx5"},"source":["Problem 2: Standardize income (z-score). Report how many incomes are outliers using rule |z|\n","> 3. Handle NaNs correctly (do not drop entire rows unnecessarily).\n"]},{"cell_type":"code","execution_count":null,"id":"8bfd4d21-522a-45bc-aef2-b31212146103","metadata":{"id":"8bfd4d21-522a-45bc-aef2-b31212146103"},"outputs":[],"source":["# Z-score standardization\n","mean_salary = df[\"salary\"].mean(skipna=True)\n","std_salary = df[\"salary\"].std(skipna=True)\n","# Compute z-scores for Income\n","df[\"salary_z\"] = (df[\"salary\"] - mean_salary) / std_salary\n","# Identify outliers using |z| > 4\n","outliers = df[(df[\"salary_z\"].abs() > 4)]"]},{"cell_type":"code","execution_count":null,"id":"458bc2aa-0108-459a-bbca-75fae1377713","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"458bc2aa-0108-459a-bbca-75fae1377713","outputId":"788f77d0-404e-4611-92a0-18c7956c6062","executionInfo":{"status":"ok","timestamp":1758191638310,"user_tz":-330,"elapsed":16,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Standardized Income (z-scores):\n","\n","     salary  salary_z\n","0   30141.0  0.513806\n","1   19896.0 -1.080845\n","2   16752.0 -1.570214\n","3   21987.0 -0.755378\n","4   30310.0  0.540111\n","5   21753.0 -0.791800\n","6   25780.0 -0.164991\n","7   29022.0  0.339632\n","8   26102.0 -0.114871\n","9   22556.0 -0.666812\n","10  16303.0 -1.640102\n","11  27399.0  0.087009\n","12  34249.0  1.153223\n","13  35204.0  1.301871\n","\n","Number of outliers = 0\n","\n","Outlier Rows:\n","\n","Empty DataFrame\n","Columns: [age, salary, increment, Age, salary_z]\n","Index: []\n"]}],"source":["print(\"\\nStandardized Income (z-scores):\\n\")\n","print(df[[ \"salary\", \"salary_z\"]].head(14))\n","\n","print(f\"\\nNumber of outliers = {outliers.shape[0]}\")\n","print(\"\\nOutlier Rows:\\n\")\n","print(outliers)"]},{"cell_type":"markdown","id":"VuQK1BzAXXbi","metadata":{"id":"VuQK1BzAXXbi"},"source":["Problem 3: Create age bins: [18-25), [25-35), [35-45), [45-60) and compute for each bin:\n","● count of observations,\n","● mean income,\n","● median score.\n","Show result as a tidy DataFrame sorted by age bin.\n"]},{"cell_type":"code","execution_count":null,"id":"e1255bb7-38f2-40fc-a3c8-6b5632b6a375","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e1255bb7-38f2-40fc-a3c8-6b5632b6a375","outputId":"f8b313ab-9798-47c7-974e-46d5f8f054e4","executionInfo":{"status":"ok","timestamp":1758191727973,"user_tz":-330,"elapsed":52,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-1260037679.py:5: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n","  result = df.groupby(\"Age_Bin\").agg(\n"]}],"source":["bins = [16, 27, 37, 48, 59]\n","labels = [\"15-25\", \"25-34\", \"34-45\", \"45-55\"]\n","\n","df[\"Age_Bin\"] = pd.cut(df[\"Age\"], bins=bins, labels=labels, right=False)\n","result = df.groupby(\"Age_Bin\").agg(\n","    Count=(\"salary\", \"count\"),\n","    Mean_Income=(\"salary\", \"mean\"),\n","    Median_Income=(\"salary\", \"median\")\n",").reset_index()\n","result = result.sort_values(\"Age_Bin\").reset_index(drop=True)"]},{"cell_type":"code","execution_count":null,"id":"e2d45f32-ea4c-466c-8d54-e7ca4b5d3f18","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e2d45f32-ea4c-466c-8d54-e7ca4b5d3f18","outputId":"358d988f-48e8-49a4-ed0a-4c45d1aa659a","executionInfo":{"status":"ok","timestamp":1758191810618,"user_tz":-330,"elapsed":23,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Result by Age Bin:\n","\n","  Age_Bin  Count  Mean_Income  Median_Income\n","0   15-25      0          NaN            NaN\n","1   25-34      0          NaN            NaN\n","2   34-45      0          NaN            NaN\n","3   45-55      0          NaN            NaN\n"]}],"source":["print(\"\\nResult by Age Bin:\\n\")\n","print(result)"]},{"cell_type":"markdown","id":"AhDoCN43XeGt","metadata":{"id":"AhDoCN43XeGt"},"source":["Problem 4: Create an array it cannot be of 1 Dimension. And then showcase the operation for\n","the following:\n","● Shape and Resize → shape, size, Transpose, Flatten\n","● Showcasing negative indexing and display error while doing slicing\n","● Arithmetic Operations → Broadcasting, Dot Product\n","● Linear Algebra → Determinant, Inverse\n","                                                                                       "]},{"cell_type":"code","execution_count":null,"id":"66d2f3d3-ec70-4d8a-9547-77fccdb7e66f","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"66d2f3d3-ec70-4d8a-9547-77fccdb7e66f","outputId":"8c1e5ff1-017c-4766-b276-1a66b8775b65","executionInfo":{"status":"ok","timestamp":1758191869057,"user_tz":-330,"elapsed":8,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Original Array:\n"," [[ 6. 18.  8.]\n"," [ 9.  5.  2.]\n"," [ 7. 10.  1.]]\n"]}],"source":["arr = np.array([[6, 18, 8],\n","                [9, 5, 2],\n","                [7, 10, 1]], dtype=float)\n","print(\"Original Array:\\n\", arr)"]},{"cell_type":"code","execution_count":null,"id":"c227c64b-96dc-42ce-a006-c4f15977246d","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c227c64b-96dc-42ce-a006-c4f15977246d","outputId":"fc7613e0-10e1-477d-856b-12dc86176f3b","executionInfo":{"status":"ok","timestamp":1758191888325,"user_tz":-330,"elapsed":48,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Shape of array: (3, 3)\n","Size of array: 9\n","Transpose of array:\n"," [[ 6.  9.  7.]\n"," [18.  5. 10.]\n"," [ 8.  2.  1.]]\n","Flattened array:\n"," [ 6. 18.  8.  9.  5.  2.  7. 10.  1.]\n"]}],"source":["# Shape and Resize\n","print(\"\\nShape of array:\", arr.shape)\n","print(\"Size of array:\", arr.size)\n","print(\"Transpose of array:\\n\", arr.T)\n","print(\"Flattened array:\\n\", arr.flatten())"]},{"cell_type":"code","execution_count":null,"id":"db46664f-70f5-46fa-a1f0-cb9df864b97f","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"db46664f-70f5-46fa-a1f0-cb9df864b97f","outputId":"a9dddc86-184d-4a54-d884-5b2468cec894","executionInfo":{"status":"ok","timestamp":1758191899978,"user_tz":-330,"elapsed":11,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Last row using negative indexing: [ 7. 10.  1.]\n","Last element using negative indexing: 1.0\n"]}],"source":["# Negative Indexing\n","print(\"\\nLast row using negative indexing:\", arr[-1])\n","print(\"Last element using negative indexing:\", arr[-1, -1])"]},{"cell_type":"code","execution_count":null,"id":"13684b04-4f9d-47fc-9ce1-3e474e04061a","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"13684b04-4f9d-47fc-9ce1-3e474e04061a","outputId":"318f1564-3920-4e67-e194-d566e24a93d3","executionInfo":{"status":"ok","timestamp":1758191920077,"user_tz":-330,"elapsed":18,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","IndexError: index -6 is out of bounds for axis 0 with size 3\n"]}],"source":["# Error in slicing\n","try:\n","    print(arr[-6])\n","except IndexError as e:\n","    print(\"\\nIndexError:\", e)"]},{"cell_type":"code","execution_count":null,"id":"b8bfee98-162a-4f3c-81b2-cf48bba3b5fc","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b8bfee98-162a-4f3c-81b2-cf48bba3b5fc","outputId":"d594276c-a97c-47ff-dc5b-6083151e35e8","executionInfo":{"status":"ok","timestamp":1758192053202,"user_tz":-330,"elapsed":21,"user":{"displayName":"Diwansh Prasher","userId":"15848484599229746472"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Broadcasting (arr + 6):\n"," [[12. 24. 14.]\n"," [15. 11.  8.]\n"," [13. 16.  7.]]\n","\n","Dot Product (arr x arr):\n"," [[254. 278.  92.]\n"," [113. 207.  84.]\n"," [139. 186.  77.]]\n","\n","Determinant: 439.99999999999983\n","Inverse:\n"," [[-0.03409091  0.14090909 -0.00909091]\n"," [ 0.01136364 -0.11363636  0.13636364]\n"," [ 0.125       0.15       -0.3       ]]\n"]}],"source":["# Arithmetic Operations\n","# Broadcasting (adding scalar)\n","print(\"\\nBroadcasting (arr + 6):\\n\", arr + 6)\n","\n","# Dot product (matrix multiplication)\n","dot_product = np.dot(arr, arr)\n","print(\"\\nDot Product (arr x arr):\\n\", dot_product)\n","\n","# Linear Algebra Operations\n","det = np.linalg.det(arr)\n","print(\"\\nDeterminant:\", det)\n","\n","# Inverse (only if determinant != 0)\n","if det != 0:\n","    inv = np.linalg.inv(arr)\n","    print(\"Inverse:\\n\", inv)\n","else:\n","    print(\"Matrix is singular, inverse does not exist\")"]},{"cell_type":"code","source":[],"metadata":{"id":"pXlhi26bai-1"},"id":"pXlhi26bai-1","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"id":"3e5fb43c-e66c-4c26-b5c4-9b2bbc38d240","metadata":{"id":"3e5fb43c-e66c-4c26-b5c4-9b2bbc38d240"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"9b448586-6d12-47e9-9461-ddf90bc3f5f1","metadata":{"id":"9b448586-6d12-47e9-9461-ddf90bc3f5f1"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"cb87bdfa-2314-49ca-bf6e-6a12978cc833","metadata":{"id":"cb87bdfa-2314-49ca-bf6e-6a12978cc833"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1-Kw2184PyaqkQUUeIeKU-SNVs1Q8wZ_r","timestamp":1758192443235}]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.4"}},"nbformat":4,"nbformat_minor":5}